#!/usr/bin/env bash

# Commands
AWK=$(command -v awk)
TERRAFORM="${TERRAFORM:-$(which terraform)}"

# Variables
resources=()
terraform_args=()
action="apply"

# Functions
err() {
    echo "$@" 1>&2
}

usage() {
    echo "Usage:"
    echo "    terraform-batch -h                              Display this help message."
    echo "    terraform-batch -f file.tf [-f file2.tf]        Apply all resources in a given file(s)."
    echo "    terraform-batch -y -f file.tf                   Automatically apply resources."
    echo "    terraform-batch -d -f file.ty                   Destroy all resources in a given file(s)."
    exit 0
}

# Parse arguments
while getopts ":df:yh" opt; do
    case ${opt} in
        d )
            action="destroy"
            ;;
        f )
            files+=("${OPTARG[@]}")
            ;;
        y )
            terraform_args+=("-auto-approve")
            ;;
        h )
            usage
            ;;
        \? )
            err "Invalid Option: -$OPTARG"
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))

# Main script
if [[ "${files[*]}" -gt 0 ]]; then
    for file in "${files[@]}"; do
        if [[ -f "${file}" ]]; then
            # shellcheck disable=SC2016
            while IFS="" read -r line; do
                resources+=("$line")
            done < <("${AWK}" '/^module/ {gsub(/"/, ""); print "-target=module."$2}' "${file}" &&
                "${AWK}" '/^resource/ {gsub(/"/, ""); print "-target="$2"."$3}' "${file}")
        else
            err "No such file or directory: ${file}"
        fi
    done
    "${TERRAFORM}" "${action}" -compact-warnings "${terraform_args[@]}" "${resources[@]}"
else
    usage
fi
